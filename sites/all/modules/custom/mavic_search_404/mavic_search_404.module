<?php

/* @file
 * The mavic search 404 module files, does all the searching
 * when a 404 occurs and handles redirect
 */


/**
 * mavic_search_404_node_presave()
 * Implements hook_node_presave()
 * make sure pathauto is disabled on update as we trigger it ourself
 */
function mavic_search_404_node_presave($node) {
  if (variable_get('mavic_search_404_overwrite_autopath', FALSE)) {
    variable_set('pathauto_update_action', 0);
  }  
} /* !mavic_search_404_node_presave() */

/**
 * mavic_search_404_node_update()
 * Implements hook_node_update()
 * check we can update the alias if it's not a system one or if pathauto_perform_alias is enabled
 */
function mavic_search_404_node_update($node) {
  if (variable_get('mavic_search_404_overwrite_autopath', FALSE)) {
    if ($node->pathauto_perform_alias || ($node->path != 'node/' . $node->nid && !empty($node->path))) {
      //get old alias
      if (!$node->pathauto_perform_alias && isset($node->old_alias)) {
        $old_alias = $node->old_alias;
      }
      else {//pathauto_perform_alias is enabled and $node->old_alias has been overwritten or it is a system upddate (i.e. product import) : get old alias
        $old_alias = drupal_get_path_alias('node/' . $node->nid, $node->language);
      }
      //call pathauto checkbox checked or no checkbox (sytem update)
      if ($node->pathauto_perform_alias || (!isset($node->pathauto_perform_alias))) {
        //enable pathauto on update
        variable_set('pathauto_update_action', 2);
        //create new alias 
        pathauto_node_update_alias($node, 'update');
        //disable pathauto on update
        variable_set('pathauto_update_action', 0);
      }
      elseif (!empty($node->path) && $node->path != 'node/' . $node->nid && $node->path != $old_alias) {
        path_set_alias('node/' . $node->nid, $node->path, isset($node->pid) ? $node->pid : NULL, $node->language);
      }
        $node->path = drupal_get_path_alias('node/' . $node->nid, $node->language);
        //if it's not a new alias (e.g. a child techno becoming an parent and thus receiving a direct URL)
        //and if the user wants to create a redirection or if it a system update (e.g. product import)
        //and if the new alias is created 
        //and it is different from the old alias, 
        //create a redirection
        if ($old_alias != 'node/' . $node->nid && ($node->mavic_set_redirect == 1 || !isset($node->mavic_set_redirect)) && $node->path != 'node/' . $node->nid && $node->path != $old_alias) {
          $redirect = mavic_search_404_insert_redirect($old_alias, $node->path, $node->language);
          if (is_array($redirect)) {
            drupal_set_message(t('The alias has changed, a redirection has been created from <em> @redirect_old </em> to <em> @redirect_new </em>.', array('@redirect_old' => $redirect['old'], '@redirect_new' => $redirect['new']), array('context' => 'Alias has changed, redirection created', 'langcode' => 'en')), 'warning');
          }
          else {
            drupal_set_message(t('The alias has changed from <em> @old_alias </em> to <em> @old_path </em>, but the system did not succeed in setting a automatic redirection, please contact your administrator.', array('@old_alias' => $old_alias, '@old_path' => $node->path), array('context' => 'Alias has changed, redirection failed', 'langcode' => 'en')), 'warning');
          }
        }
      //the alias has to be deleted 
    }
    elseif (!$node->pathauto_perform_alias && ($node->path == 'node/' . $node->nid || empty($node->path) || !isset($node->path))) {
      $old_alias = drupal_get_path_alias('node/' . $node->nid, $node->language);
      //if an alias exist, 
      if ($old_alias != 'node/' . $node->nid) {
        if (isset($node->path))
        //unset it so path module can delete it
          unset($node->path);
        //prepare redirection
        $redirect = mavic_search_404_insert_redirect($old_alias, NULL, $node->language, TRUE);
        if (is_array($redirect)) {
          drupal_set_message(t('The alias <em> @redirect_old </em> is ready to be redirected, follow this <a href="@path">link</a> to edit it and prevent 404 error.', array('@redirect_old' => $redirect['old'], '@path' => '/en/admin/settings/mavic_search_404_redirect'), array('context' => 'The alias redirect old is ready to be redirected', 'langcode' => 'en')), 'warning');
        }
        else {
          drupal_set_message(t('The system did not succeed in preparing a redirection for the alias <em> @old_alias </em>, please copy it before contacting your administrator.', array('@old_alias' => $node->language . '/' . $old_alias), array('context' => 'The redirection for the alias has failed', 'langcode' => 'en')), 'error');
        }
      }
    }
  }  
} /* !mavic_search_404_node_update() */

/**
 * mavic_search_404_node_delete()
 * Implements hook_node_delete()
 * set a redirection to the search page when a node is deleted
 */
function mavic_search_404_node_delete($node) {
  if (variable_get('mavic_search_404_redirect_deleted', FALSE)) {
    $old_alias = drupal_get_path_alias('node/' . $node->nid, $node->language);
    if ($old_alias != 'node/' . $node->nid) {
      $redirect = mavic_search_404_insert_redirect($old_alias, NULL, $node->language, TRUE);
      if (is_array($redirect)) {
        drupal_set_message(t('The alias <em> @redirect_old </em> is ready to be redirected, follow this <a href="@path">link</a> to edit it and prevent 404 error.', array('@redirect_old' => $redirect['old'], '@path' => '/en/admin/settings/mavic_search_404_redirect'), array('context' => 'Alias ready to be redirected', 'langcode' => 'en')), 'warning');
      }
      else {
        drupal_set_message(t('The system did not succeed in preparing a redirection for the alias <em> @old_alias </em>, please copy it before contacting your administrator.', array('@old_alias' => $node->language . '/' . $old_alias), array('context' => 'Redirection for the alias has failed', 'langcode' => 'en')), 'error');
      }
    }
  }
} /* !mavic_search_404_node_delete() */

/**
 * mavic_search_404_insert_redirect()
 * Insert old/new alias in the DB
 * This function call a stored procedure which checks that the size of the table does not exceed 50Mb
 * @param string $old_alias
 * @param string $new_alias
 * @param string $lang
 * @param boolean $is_deleted
 * @return mixed : an array of "old" and "new" path if success, FALSE otherwise
 */
function mavic_search_404_insert_redirect($old_alias, $new_alias = NULL, $lang = NULL, $is_deleted = FALSE) {
	global $active_db;
	if (empty($old_alias) || (!empty($new_alias) && $is_deleted))
		return FALSE;
	$new_alias = (empty($new_alias)) ? '' : $new_alias;
	if (!empty($lang)) {
		$old_alias = $lang . '/' . $old_alias;
		$new_alias = (empty($new_alias)) ? '' : $lang . '/' . $new_alias;
	}
	//cast boolean
	$is_active = (empty($new_alias)) ? 0 : 1;
	$deleted = ($is_deleted) ? 1 : 0;
	//prevent looping
	if (!empty($new_alias) && $new_alias != '<front>') {
		$nloopq = db_query("SELECT id FROM {mavic_redirect} WHERE url='%s' ", $new_alias);
		while ($noloop = db_fetch_array($nloopq)) {
			db_delete('mavic_redirect')
        ->condition('id', array('%d' => $noloop['id']))
        ->execute();
			//db_query("DELETE FROM {mavic_redirect} WHERE `id` = %d ", $noloop['id']);
		}
	}
	//check it does not exist already
	if ($result = db_fetch_array(db_query("SELECT id FROM {mavic_redirect} WHERE url='%s' ", $old_alias))) {
		if (db_query("UPDATE {mavic_redirect} SET `url_to_redirect` = '%s', `is_active` = %d, `deleted` = %d WHERE `id` = %d ", array($new_alias, $is_active, $deleted, $result['id']))) {
					return array('old' => $old_alias, 'new' => $new_alias);
				}
    else {
					return FALSE;
				}
	}
	else {
		//call stored procedure mavic_redirect_insert(old_alias,new_alias,is_active,hit,deleted)
		//does not rely on db_query as it does not handle call to procedure returning values
		$old_alias = db_escape_string($old_alias);
		$new_alias = db_escape_string($new_alias);
		$querryStr = 'CALL mavic_redirect_insert("' . $old_alias . '","' . $new_alias . '",' . $is_active . ', 0,' . $deleted . ',@x); SELECT @x;';
		if (mysqli_multi_query($active_db, $querryStr)) {
			$firstResult = mysqli_store_result($active_db);
			mysqli_free_result($firstResult);
			if (mysqli_next_result($active_db)) {
				$result = mysqli_store_result($active_db);
				$row = mysqli_fetch_row($result);
				mysqli_free_result($result);
				if ($row[0] === 'ok') {
					return array('old' => $old_alias, 'new' => $new_alias);
				//else log the message stating that mavic_redirect's size has reached the 50Mb limit
				}
				elseif (isset($row[0])) {
					error_log($row[0]);
				}
			}
		}
		return FALSE;		
	}
}

/**
 * Implementation of hook_menu().
 */
function mavic_search_404_menu() {
	$items = array();

	$items['mavic_search_404'] = array(
		'title' => 'Page not found',
		'access callback' => TRUE,
		'page callback' => 'mavic_search_404_dispatcher',
		'type' => MENU_LOCAL_TASK
	);

	$items['admin/settings/mavic_search_404'] = array(
		'title' => 'Mavic 404 settings',
		'description' => 'Administer Mavic 404.',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('mavic_search_404_settings'),
		'access callback' => 'user_access',
		'access arguments' => array('administer site configuration'),
		'type' => MENU_NORMAL_ITEM,
	);

	$items['admin/settings/mavic_search_404_redirect'] = array(
		'title' => 'Mavic 404 Redirect Rules',
		'description' => 'Administer Mavic 404 Redirect.',
		'page callback' => 'mavic_search_404_redirect',
		'access callback' => 'user_access',
		'access arguments' => array('administer site configuration'),
		'type' => MENU_NORMAL_ITEM,
	);
	$items['admin/settings/mavic_search_404_redirect/edit'] = array(
		'page callback' => 'mavic_search_404_redirect_edit',
		'access arguments' => array('administer site configuration'),
		'type' => MENU_CALLBACK,
	);
	$items['admin/settings/mavic_search_404_redirect/autocomplete'] = array(
		'page callback' => 'mavic_search_404_redirect_autocomplete',
		'access arguments' => array('administer site configuration'),
		'type' => MENU_CALLBACK,
	);

	return $items;
}

function mavic_search_404_help($path, $arg) {
	switch ($path) {
		case 'admin/settings/mavic_search_404_redirect':
			$output = '<p>' . t('"Mavic 404 Redirect Rules" stores all requests which have resulted in a 404 error, and subsequently redirected the user to the search engine.', array(), array('context' => 'Helping text', 'langcode' => 'en')) . '</p>';
			$output .= '<p>' . t('It also stores all redirections caused by updating an existing alias (e.g. when path changes due to a product name change) or after deleting a node.', array(), array('context' => 'Helping text', 'langcode' => 'en')) . '</p>';
			$output .= '<p>' . t('This module adds the ability to set / change the path for redirection:', array(), array('context' => 'Helping text', 'langcode' => 'en')) . '<ul>';
			$output .= '<li>' . t('External redirection is not possible: please contact your administrator', array(), array('context' => 'Helping text', 'langcode' => 'en')) . '<li>';
			$output .= '<li>' . t('Provide only the path (e.g. "en/path/to/my/product?someparam=abc" or "node/1234").', array(), array('context' => 'Helping text', 'langcode' => 'en')) . '</li>';
			$output .= '<li>' . t('Use the special string "&lt;front&gt;" to redirect to the front page.', array(), array('context' => 'Helping text', 'langcode' => 'en')) . '</li>';
			$output .= '<li>' . t('The system tests the submitted path and if valid, will store it (system path like "node/1234" are converted to their alias path)', array(), array('context' => 'Helping text', 'langcode' => 'en')) . '</li>';
			$output .= '<li>' . t('The autocomplete feature may not return all existing URLs', array(), array('context' => 'Helping text', 'langcode' => 'en')) . '</li>';
			return $output;
	}
}

/**
 * Replacement for search_get_keys
 * This function can potentially return dangerous
 * potential SQL inject/XSS data.
 * Return must be sanatized before use.
 */
function mavic_search_404_get_keys() {
	global $language;
	$keys = $_REQUEST['destination'] ? $_REQUEST['destination'] : $_REQUEST['q'];

	// queries with file/img extension have allready been filtered in mavic_search_404_dispatcher
	//Remove the Language Prefix Appended to Search String (http://drupal.org/node/560426)
	if (LANGUAGE_NEGOTIATION_PATH_DEFAULT && $language->language) {
		$keys = preg_replace("/^" . $language->language . "\//i", '', $keys);
	}
	$regex_filter = variable_get('mavic_search_404_regex', '');
	$keys_array[] = $keys;
	if (!empty($regex_filter)) {
		$keys = preg_replace("/" . $regex_filter . "/i", '', $keys);
	}

	// Ignore certain extensions from query.
	$extensions = explode(' ', variable_get('mavic_search_404_ignore_extensions', 'htm html php'));
	$extensions = trim(implode('|', $extensions));
	if (!empty($extensions)) {
		$keys = preg_replace("/\.($extensions)$/i", '', $keys);
	}

	$keys = preg_split('/[' . PREG_CLASS_SEARCH_EXCLUDE . ']+/u', $keys);

	// Ignore certain words (use case insensitive search).
	$keys = array_udiff($keys, explode(' ', variable_get('mavic_search_404_ignore', t('and or the'))), 'strcasecmp');
	//Sanitize the keys
	foreach ($keys as $a => $b) {
		$keys[$a] = check_plain($b);
	}
	$modifier = variable_get('mavic_search_404_use_or', FALSE) ? ' OR ' : ' ';
	$keys = trim(implode($modifier, $keys));
	//Check for keyword that can be associated to mavic search filters and add relevant params
	$form_filter = variable_get('mavic_search_404_form_filter_regex', ''); //product|news|technolog|histor|video
	$form_filter_name = trim(variable_get('mavic_search_404_form_filter_name', '')); //product;news;technology;history;video
	if (!empty($form_filter) && !empty($form_filter_name)) {
		$form_filter_nameA = explode(";", $form_filter_name, 5);
		$form_filterA = explode("|", $form_filter, 5);
		$resultA = array();
		if (preg_match("/" . $form_filter . "/i", $keys, $resultA)) {
			switch ($resultA[0]) {
				case $form_filterA[0] :
					$keys .= '?more=' . $form_filter_nameA[0];
					break;
				case $form_filterA[1] :
					$keys .= '?more=' . $form_filter_nameA[1];
					break;
				case $form_filterA[2] :
					$keys .= '?more=' . $form_filter_nameA[2];
					break;
				case $form_filterA[3] :
					$keys .= '?more=' . $form_filter_nameA[3];
					break;
				case $form_filterA[4] :
					$keys .= '?more=' . $form_filter_nameA[4];
					break;
				default:
					$keys .= '?more=all';
					break;
			}
		}
	}
	return $keys;
}

/**
 * Detect search from search engine.
 */
function mavic_search_404_search_engine_query() {
	$engines = array(
		'altavista' => 'q',
		'aol' => 'query',
		'google' => 'q',
		'bing' => 'q',
		'lycos' => 'query',
		'yahoo' => 'p',
	);

	// Try to extract searchengine querystring only if HTTP_REFERER was set (#1111918)
	if (isset($_SERVER['HTTP_REFERER'])) {
		$parsed_url = parse_url($_SERVER['HTTP_REFERER']);
		$remote_host = isset($parsed_url['host']) ? $parsed_url['host'] : '';
		$query_string = isset($parsed_url['query']) ? $parsed_url['query'] : '';

		parse_str($query_string, $query);
		if (!$parsed_url === FALSE && !empty($remote_host) && !empty($query_string) && count($query)) {
			foreach ($engines as $host => $key) {
				if (strpos($remote_host, $host) !== FALSE && array_key_exists($key, $query)) {
					return trim($query[$key]);
				}
			}
		}
	}
	return FALSE;
}

/**
 * Dispatcher for Mavic Search or Perma redirect : check for existing redirection, redirect if found or store the request for later redirecting if not 
 */
function mavic_search_404_dispatcher() {

	$currentUrl = $_REQUEST['q'];

	// Abort query on certain extensions, e.g: gif jpg jpeg png
	$extensions = explode(' ', variable_get('mavic_search_404_ignore_query', 'gif jpg jpeg bmp png'));
	$extensions = trim(implode('|', $extensions));
	if (!empty($extensions) && preg_match("/\.($extensions)$/i", $currentUrl)) {
		return FALSE;
	}

	//check for an existing redirection
	if ($result = db_fetch_array(db_query("SELECT id, url, url_to_redirect, is_active FROM {mavic_redirect} WHERE url='%s' ", $currentUrl))) {
		//store hit
		db_query("UPDATE {mavic_redirect} SET hit = hit + 1 WHERE id=%d ", $result['id']);
		// Perma redirect to new item
		if ($result['is_active'] && !empty($result['url_to_redirect'])) {
			$options = array();
			$langA = language_list();
			$redirectIT = '<front>';
			if ($result['url_to_redirect'] != '<front>') {
				//prevent looping
				if ($noloop = db_fetch_array(db_query("SELECT id, url, url_to_redirect, is_active FROM {mavic_redirect} WHERE url='%s' ", $result['url_to_redirect']))) {
					//store directly the final target
					db_query("UPDATE {mavic_redirect} SET url_to_redirect='%s' WHERE `id` = %d ", array($noloop['url_to_redirect'], $result['id']));
					$options = array('alias' => TRUE, 'language' => $langA[substr($noloop['url_to_redirect'], 0, 2)]);
					$redirectIT = substr($noloop['url_to_redirect'], 3);
				} else {
					$options = array('alias' => TRUE, 'language' => $langA[substr($result['url_to_redirect'], 0, 2)]);
					$redirectIT = substr($result['url_to_redirect'], 3);
				}
			}

			header('Status: 301 Moved Permanently', FALSE, 301);

			header('Location: ' . url($redirectIT, $options));

			exit();
		}


		return mavic_search_404_page();
	}

	//else store it 
	mavic_search_404_insert_redirect($currentUrl);

	return mavic_search_404_page();
}

/**
 * Main search function.
 * Started with: http://drupal.org/node/12668
 * Cleaned to target mavic modules
 */
function mavic_search_404_page() {

	$output = '';
	drupal_set_title(variable_get('mavic_search_404_page_title', t('Page not found')));
	$keys = mavic_search_404_get_keys();
	$results = "";
	$type_search = 'node';
	if ($keys && !variable_get('mavic_search_404_skip_auto_search', FALSE)) {
		if (module_exists('google_cse_adv') && module_exists('mavic_search') && variable_get('mavic_search_404_do_mavic_search', FALSE)) {
			mavic_search_404_goto('search/google_cse_adv/' . $keys);
		} else {
			$results = module_invoke($type_search, 'search', 'search', $keys);
			// First, check to see if there is exactly 1 result and if jump to first
			// is selected then jump to it.
			if (isset($results) && is_array($results) && count($results) == 1 && variable_get('mavic_search_404_jump', FALSE)) {
				if (!variable_get('mavic_search_404_disable_error_message', FALSE)) {
					drupal_set_message(t('The page you requested does not exist. A search for %keys resulted in this page.', array('%keys' => check_plain($keys)), array('context' => 'The page you requested does not exist', 'langcode' => 'en')), 'status');
				}
				mavic_search_404_goto('node/' . $results[0]['node']->nid);
			}
			// Even if there is more than one result and the force jump to first result is
			// selected, go ahead and jump to first result.
			elseif (isset($results) && is_array($results) && count($results) >= 1 && variable_get('mavic_search_404_first', FALSE)) {
				if (!variable_get('mavic_search_404_disable_error_message', FALSE)) {
					drupal_set_message(t('The page you requested does not exist. A search for %keys resulted in this page.', array('%keys' => check_plain($keys)), array('context' => 'The page you requested does not exist', 'langcode' => 'en')), 'status');
				}
				mavic_search_404_goto('node/' . $results[0]['node']->nid);
			} else {
				if (!variable_get('mavic_search_404_disable_error_message', FALSE)) {
					drupal_set_message(t('The page you requested does not exist. For your convenience, a search was performed using the query %keys.', array('%keys' => check_plain($keys)), array('context' => 'The page you requested does not exist', 'langcode' => 'en')), 'error');
				}
				if (isset($results) && is_array($results) && count($results) > 0) {
					drupal_add_css(drupal_get_path('module', 'search') . '/search.css', 'module', 'all', FALSE);
					// Hack to get search results themed by manipulating $_GET['q']!
					$oldgetq = $_GET['q'];
					$olddestination = $_REQUEST['destination'];
					unset($_REQUEST['destination']);
					$_GET['q'] = "search/$type_search/$keys";
					$results = theme('search_results', $results, 'node');
					$_GET['q'] = $oldgetq;
					$_REQUEST['destination'] = $olddestination;
					// End of Hack
				} else {
					$results = search_help('search#noresults', drupal_help_arg());
				}
				$results = theme('box', t('Search results'), $results);
			}
		}
	}

	$search_suggestions = '';
	$search_form = drupal_get_form('search_form', NULL, $keys, $type_search);
	$output = variable_get('mavic_search_404_page_text', '') . $search_form . $search_suggestions . $results;

	return $output;
}

/**
 * mavic_search_404 drupal_goto helper function.
 */
function mavic_search_404_goto($path = '') {
	global $language;
	if (variable_get('mavic_search_404_redirect_force_404', FALSE)) {
		if (trim($path)) {
			$path = url($path, array('query' => array('tpl_404' => $_REQUEST['q'])));
		}

		if (headers_sent()) {
			exit('<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
  	<html>
  	<head>
  	<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
  	<title>Mavic : Page not found, we are redirecting you...</title>
  	<script>document.location.href="http://' . $_SERVER['HTTP_HOST'] . $path . '";</script>
  	<style type="text/css">
        html, body { margin: 0; padding: 0; height: 100%; }
    </style>
  	</head>
  	<body >
	<p>The requested page does not exist on this server.</p>
	</p>If you are not redirected within a few seconds, <a href="http://' . $_SERVER['HTTP_HOST'] . $path . '">please click here...</a></p>
  	</body>
  	</html>');
		}
		else {

			@ob_end_clean(); // clear output buffer
			drupal_add_http_header('HTTP/1.1', '404 Not Found');
			echo '<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
  	<html>
  	<head>
  	<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
  	<title>Mavic : Page not found, we are redirecting you...</title>
  	<script>document.location.href="http://' . $_SERVER['HTTP_HOST'] . $path . '";</script>
  	<style type="text/css">
        html, body { margin: 0; padding: 0; height: 100%; }
    </style>
  	</head>
  	<body >
	<p>The requested page does not exist on this server.</p>
	</p>If you are not redirected within a few seconds, <a href="http://' . $_SERVER['HTTP_HOST'] . $path . '">please click here...</a></p>
  	</body>
  	</html>';
			exit();
		}
	}
	// Overwrite $_REQUEST['destination'] because it is set by drupal_not_found().
	$_REQUEST['destination'] = $path;
	// Set 301 redirect if so specified in settings else do default 302 redirect.

	if (variable_get('mavic_search_404_redirect_301', FALSE)) {
		$http_status = 301;
	}
	else {
		$http_status = 302;
	}
	drupal_goto($path, NULL, NULL, $http_status);
}

/**
 * mavic_search_404_redirect administration pages.
 */
function mavic_search_404_redirect() {
	return drupal_get_form('mavic_search_404_redirect_form');
}

/**
 * ajax callback function for storing new values
 */
function mavic_search_404_redirect_edit($url_id) {

	$cached_form_state = array();
	$form_build_id = $_POST['form_build_id'];

	// Load the form from the Form API cache.
	if (!($cached_form = form_get_cache($form_build_id, $cached_form_state))) {
		form_set_error('form_token', t('Validation error, please try again. If this error persists, please contact the site administrator.'));
		$output = theme('status_messages');
		print drupal_to_js(array('status' => TRUE, 'data' => $output));
		exit();
	}

	$form_state = array('values' => $_POST);

	//Check and store
	if (isset($form_state['values']['new_url_id_' . $url_id])) {
		$newUrl = $form_state['values']['new_url_id_' . $url_id];
		if (!empty($newUrl)) {
			$path = trim($newUrl);
			//remove eventual preceeding slash
			if (strpos($path, "/") === 0) {
				$npath = $path;
				$path = substr($npath, 1);
			}
			//set verif
			$pathOk = FALSE;
			//if system path, get the alias
			if (strpos($path, "node/") === 0) {
				$nid = substr($path, 5);
				$lang = db_result(db_query("SELECT n.language FROM {node} n WHERE n.nid=%d", $nid));
				$pathAlias = drupal_get_path_alias($path, $lang);
				if ($pathAlias != $path) {
					$path = $pathAlias;
					$pathOk = TRUE;
				}
				else {
					drupal_set_message(t('This system path has no URL alias.', array(), array('context' => 'This system path has no URL alias', 'langcode' => 'en')) . print_r($path, TRUE), 'error');
				}
			}
			elseif ($path != '<front>') {
				$pathSource = substr($path, 3);
				$pahtLang = substr($path, 0, 2);
				if (drupal_lookup_path('source', $pathSource, $pahtLang) != FALSE) {
					$pathOk = TRUE;
				}
				else {
					drupal_set_message(t('This URL does not exist.'), 'error');
				}
			}
			if ($path == '<front>' || $pathOk) {
				$cleanPath = ($path == '<front>') ? $path : rawurldecode($path);
				$is_active = ($form_state['values']['is_active_id_' . $url_id]) ? 1 : 0;
				if (db_query("UPDATE {mavic_redirect} SET `url_to_redirect` = '%s', `is_active` = %d WHERE `id` = %d ", $cleanPath, $is_active, $url_id)) {
					drupal_set_message(t('New values successfully stored.', array(), array('context' => 'New values successfully stored.', 'langcode' => 'en')));
				}
				else {
					drupal_set_message(t('An error occured while updating the database.' . db_error(), array(), array('context' => 'An error occured while updating the database', 'langcode' => 'en')), 'error');
				}
			}
		}
		else {
			drupal_set_message(t('Please enter a value.', array(), array('context' => 'Please enter a value', 'langcode' => 'en')), 'error');
		}
	}


	//clear form's list 
	unset($cached_form['list']);
	$cached_form['list'] = array();

	// Render the form for output.
	$cached_form += array(
		'#post' => $_POST,
		'#programmed' => FALSE,
		'#tree' => FALSE,
		'#parents' => array(),
	);
	//Pager.inc get page's number as $_GET : thus it has been attached as a hidden form element to let us reset $_GET now :
	$_GET['page'] = isset($form_state['values']['page']) ? $form_state['values']['page'] : '';
	//rebuilt the form element according to the current page :
	$data = &$cached_form;
	$data['target_id'] = $url_id;
	$form_state['rebuild'] = TRUE;
	$data['__drupal_alter_by_ref'] = array(&$form_state);
  //drupal_alter('form', $data, 'mavic_search_404_redirect_form');
  drupal_alter('form', $data);

	//cache it
	$form_state = array('submitted' => FALSE);
	form_set_cache($cached_form['form_build_id'], $cached_form, $form_state);

	$form = form_builder('mavic_search_404_redirect_form', $cached_form, $cached_form_state);

	$output = theme('status_messages') . drupal_render($form);

	print drupal_to_js(array('status' => TRUE, 'data' => $output));
	exit;
}

function mavic_search_404_theme() {
	$theme['mavic_search_404_redirect_render'] = array(
		'arguments' => array('form' => array()),
	);
	return $theme;
}

function theme_mavic_search_404_redirect_render($form = array()) {
	$path = drupal_get_path('module', 'mavic_search_404');

	drupal_add_css($path . '/assets/mavic_search_404.css');
	//rebuilt sorting filters for display into a draggable table
	$table_rowsF = array();
	//retrieve the weight of rows
	$weight_order = array();
	foreach ($form['filter'] as $id => $row) {
		//skip the row not needed
		if ($id != 'sort_status' && $id != 'sort_active' && $id != 'sort_deleted' && $id != 'sort_hit')
			continue;
		$weight_order[$form['filter'][$id][$id . '_weight']['#default_value']] = $id;
	}
	ksort($weight_order);
	foreach ($weight_order as $id) {
		$rowsF = array();
		// Rendering the Title and order elements into the table
		$rowsF[] = drupal_render($form['filter'][$id][$id . '_title']);
		$rowsF[] = drupal_render($form['filter'][$id][$id . '_order']);
		$rowsF[] = drupal_render($form['filter'][$id][$id . '_weight']);
		$table_rowsF[] = array('data' => $rowsF, 'class' => 'draggable');
	}
	// Headers for the sort table
	$headerF = array(
		'Title',
		'Order',
		'Weight'
	);

	// Table id
	$table_id_filter = 'filter_sort';
	// Get the table drag and drop javaScript behavior
	drupal_add_tabledrag($table_id_filter, 'order', 'sibling', 'weight');

	//URL tables
	$head = array(
		array('data' => 'ID'),
		array('data' => 'Active'),
		array('data' => 'Source/target URL'),
		array('data' => 'Hit'),
	);

	//rebuilt form for displaying into a table
	$rows = array();
	$listB = array_keys($form['list']);
	foreach ($listB as $id) {
		$fields = array();
		if (isset($form['list'][$id]['list_' . $id])) {
			$fields[] = drupal_render($form['list'][$id]['list_' . $id]);
			$fields[] = drupal_render($form['list'][$id]['is_active_' . $id]);
			$fields[] = drupal_render($form['list'][$id]['old_url_' . $id]) . drupal_render($form['list'][$id]['new_url_' . $id]);
			$fields[] = drupal_render($form['list'][$id]['hits_' . $id]);
			$fields[] = drupal_render($form['list'][$id]['url_edit_' . $id]);
			$rows[] = $fields;
		}
	}

	$limit = 15;
	$tags = array(
		'first',
		'<prev',
		'',
		'next>',
		'last',
	);
	$form['filter']['desc'] = array(
		'#type' => 'markup',
		'#value' => '<p>' . t('By default, this list is sorted according to the active/in-active state of the URL’s, hits (number of times a URL has been requested) and whether the redirection has been set, but you can reorder it below : <br />set the order for each row and drag and drop them to set their priority. <br />For example, to display first all the alias from deleted nodes not yet redirected, set the row <em>Source</em> on "Node deleted" and drag it to the top of the list, followed by the row <em>URL to redirect</em> set on "is not yet set" )', array(), array('context' => 'By default, this list is sorted', 'langcode' => 'en')) . '</p>',
		'#weight' => '-1',
	);
	$form['filter']['wrapper'] = array(
		'#type' => 'markup',
		'#value' => theme('table', $headerF, $table_rowsF, array('id' => $table_id_filter)),
		'#weight' => '1',
	);
	$output .= drupal_render($form['filter']);
	$output .= theme('pager', $tags, $limit); //sub-theming function "pager_link" has been overwritten as the original function was apending all POST data to the links
	$output .= theme('table', $head, $rows); // Theme as table output
	$output .= theme('pager', $tags, $limit);
	$output .= drupal_render($form); // Render rest of form components.
	return $output;
}

function mavic_search_404_redirect_form_submit(&$form, &$form_state) {
	//don't clear form_state so we can sort the list and cache it for subsequent ajax call
	$form_state['rebuild'] = TRUE;
	//Store in session the sorting settings while browsing to other pages
	$_SESSION['mavic_search_404_redirect'] = $form_state;
}

function mavic_search_404_form_alter(&$form, &$form_state, $form_id) {
	//retrieve sorting settings if the user set them on another page
	if (isset($_SESSION['mavic_search_404_redirect']) && !empty($_SESSION['mavic_search_404_redirect']['values'])) {
		$form_state_ses = $_SESSION['mavic_search_404_redirect'];
  }
	if (isset($form_state['values']) && !empty($form_state['values'])) {
		$form_state_ses = $form_state;
  }

	if ($form_id == 'mavic_search_404_redirect_form') {

		$form['filter']['sort_status'] = array(
			'sort_status_title' => array(
				'#type' => 'markup',
				'#value' => t('URL to redirect to', array(), array('context' => 'URL to redirect to', 'langcode' => 'en')),
			),
			'sort_status_order' => array(
				'#type' => 'select',
				'#default_value' => (isset($form_state_ses['values']['sort_status_order'])) ? $form_state_ses['values']['sort_status_order'] : 'ASC',
				'#options' => array('ASC' => 'is not yet set', 'DESC' => 'is set'),
			),
			'sort_status_weight' => array(
				'#type' => 'weight',
				'#delta' => 4,
				'#default_value' => (isset($form_state_ses['values']['sort_status_weight'])) ? $form_state_ses['values']['sort_status_weight'] : 0,
				'#attributes' => array('class' => 'weight'),
			),
		);
		$form['filter']['sort_active'] = array(
			'sort_active_title' => array(
				'#type' => 'markup',
				'#value' => t('Redirection'),
			),
			'sort_active_order' => array(
				'#type' => 'select',
				'#default_value' => (isset($form_state_ses['values']['sort_active_order'])) ? $form_state_ses['values']['sort_active_order'] : 'ASC',
				'#options' => array('DESC' => 'is active', 'ASC' => 'is not active'),
			),
			'sort_active_weight' => array(
				'#type' => 'weight',
				'#delta' => 4,
				'#default_value' => (isset($form_state_ses['values']['sort_active_weight'])) ? $form_state_ses['values']['sort_active_weight'] : 2,
				'#attributes' => array('class' => 'weight'),
			),
		);
		$form['filter']['sort_deleted'] = array(
			'sort_deleted_title' => array(
				'#type' => 'markup',
				'#value' => t('Source'),
			),
			'sort_deleted_order' => array(
				'#type' => 'select',
				'#default_value' => (isset($form_state_ses['values']['sort_deleted_order'])) ? $form_state_ses['values']['sort_deleted_order'] : 'ASC',
				'#options' => array('DESC' => 'Nodes deleted', 'ASC' => 'other'),
			),
			'sort_deleted_weight' => array(
				'#type' => 'weight',
				'#delta' => 4,
				'#default_value' => (isset($form_state_ses['values']['sort_deleted_weight'])) ? $form_state_ses['values']['sort_deleted_weight'] : 3,
				'#attributes' => array('class' => 'weight'),
			),
		);
		$form['filter']['sort_hit'] = array(
			'sort_hit_title' => array(
				'#type' => 'markup',
				'#value' => t('Number of hits', array(), array('context' => 'Number of hits', 'langcode' => 'en')),
			),
			'sort_hit_order' => array(
				'#type' => 'select',
				'#default_value' => (isset($form_state_ses['values']['sort_hit_order'])) ? $form_state_ses['values']['sort_hit_order'] : 'DESC',
				'#options' => array('DESC' => 'highest first', 'ASC' => 'lowest first'),
			),
			'sort_hit_weight' => array(
				'#type' => 'weight',
				'#delta' => 4,
				'#default_value' => (isset($form_state_ses['values']['sort_hit_weight'])) ? $form_state_ses['values']['sort_hit_weight'] : 1,
				'#attributes' => array('class' => 'weight'),
			),
		);
		$form['filter']['submit'] = array(
			'#type' => 'submit',
			'#value' => t('Sort'),
			'#weight' => 20,
		);
		//build query for sorting
		$weight_order = array();
		foreach ($form['filter'] as $id => $row) {
			//skip the row not needed
			if ($id != 'sort_status' && $id != 'sort_active' && $id != 'sort_deleted' && $id != 'sort_hit')
				continue;
			$weight_order[$form['filter'][$id][$id . '_weight']['#default_value']] = array('id' => $id, 'order' => $form['filter'][$id][$id . '_order']['#default_value']);
		}
		ksort($weight_order);
		$order_by = array();
		foreach ($weight_order as $id) {
			switch ($id['id']) {
				case 'sort_status' :
					$order_by[] = ' status ' . $id['order'];
					break;
				case 'sort_active' :
					$order_by[] = ' is_active ' . $id['order'];
					break;
				case 'sort_deleted' :
					$order_by[] = ' deleted ' . $id['order'];
					break;
				case 'sort_hit' :
					$order_by[] = ' hit ' . $id['order'];
					break;
			}
		}

		//$query = "SELECT *, IF((`url_to_redirect` = ''),0,IF((`url_to_redirect` IS NULL),0,1)) AS status FROM {mavic_redirect} ORDER BY " . implode(',', $order_by);
    $query = db_query("SELECT *, IF((`url_to_redirect` = ''),0,IF((`url_to_redirect` IS NULL),0,1)) AS status FROM {mavic_redirect} ORDER BY :order_by", array(':order_by' => implode(',', $order_by)));
		$limit = 15;
    $result = $query->extend('PagerDefault')
      ->limit($limit)
      ->execute();

		//$result = pager_query($query, $limit);//"SELECT COUNT(*) FROM url_to_redirect"
		foreach ($result as $row_object) {
			$prefix = ($row_object->status) ? '<div class="toFloat">' : '<div class="toFloat missing">';
			$form['list']['id_' . $row_object->id] = array(
				'list_id_' . $row_object->id => array(
					'#value' => $row_object->id,
				),
				'is_active_id_' . $row_object->id => array(
					'#type' => 'checkbox',
					'#value' => $row_object->is_active,
				),
				'old_url_id_' . $row_object->id => array(
					'#prefix' => (isset($form['target_id']) && $form['target_id'] == $row_object->id) ? theme('status_messages') . '<p>' : '<p>',
					'#value' => ($row_object->status) ? t('Old URL', array(), array('context' => 'Old URL', 'langcode' => 'en')) . ': <span class="old_url">' . rawurldecode($row_object->url) . '</span>' : t('Old URL', array(), array('context' => 'Old URL', 'langcode' => 'en')) . ': <span class="old_url missing">' . rawurldecode($row_object->url) . '</span>',
					'#suffix' => '</p>',
				),
				'new_url_id_' . $row_object->id => array(
					'#prefix' => $prefix,
					'#value' => (!empty($row_object->url_to_redirect)) ? $row_object->url_to_redirect : '',
					'#type' => 'textfield',
					'#size' => 70,
					'#title' => t('New URL'),
					'#suffix' => '</div>',
					'#autocomplete_path' => 'admin/settings/mavic_search_404_redirect/autocomplete',
				),
				'hits_id_' . $row_object->id => array(
					'#value' => (!empty($row_object->hit)) ? $row_object->hit : '1',
				),
				'url_edit_id_' . $row_object->id => array(
					'#type' => 'button',
					'#value' => t('save'),
					//'#ahah' => array(
					'#ajax' => array(
					   'callback' => 'mavic_search_404_redirect_edit',
						//'path' => 'admin/settings/mavic_search_404_redirect/edit/' . $row_object->id,
						'wrapper' => 'mavic_search_404_redirect_wrapper',
						'event' => 'click',
						'method' => 'replace',
						'effect' => 'fade',
					),
				),
			);
		}

		//unset the ajax setter defining the target
		if (isset($form['target_id']))
			unset($form['target_id']);
	}
}

/**
 * Implements hook_form_FORM_ID_alter()
 * Process only node forms.
 */ 
function mavic_search_404_form_mavic_search_404_redirect_form_alter(&$form, &$form_state, $form_id) {
		if (variable_get('mavic_search_404_overwrite_autopath', FALSE)) {
			$form['mavic_search_404'] = array(
				'#type' => 'fieldset',
				'#title' => t('Redirect settings'),
				'#collapsible' => TRUE,
				'#collapsed' => TRUE,
				'#access' => user_access('create url aliases'),
				'#weight' => 31,
			);
			$form['mavic_search_404']['mavic_set_redirect'] = array(
				'#type' => 'checkbox',
				'#title' => t('Redirect'),
				'#default_value' => 1,
				'#description' => t('If the alias changes, set a redirection to prevent 404 errors. Note that if you enable this feature, the path will be updated, regardless of wether or not pathauto admin settings allow it when updating a node.'),
				'#weight' => -1,
			);
		}
	}

function mavic_search_404_redirect_form(&$form_state) {

	$form = array();
	/* $form['redebug'] = array(
	  '#value' => '<pre>'.print_r($form_state,true).'</pre>',
	  ); */
	$form['#cache'] = TRUE;

	$form['#prefix'] = '<div id="mavic_search_404_redirect_wrapper">';
	$form['#suffix'] = '</div>';
	//cache the page as ajax call back function can't access it
	$form['page'] = array(
		'#type' => 'hidden',
		'#value' => isset($_GET['page']) ? $_GET['page'] : '',
	);

	$form['filter'] = array(
		'#type' => 'fieldset',
		'#title' => t('Sort by'),
	);

	$form['list'] = array();

	$form['#theme'] = 'mavic_search_404_redirect_render';

	return $form;
}

/**
 * mavic_search_404 administration settings.
 */
function mavic_search_404_settings() {
	$form['mavic_search_404_jump'] = array(
		'#type' => 'checkbox',
		'#title' => t('Jump directly to the search result when there is only one result', array(), array('context' => 'Search 404 jump result', 'langcode' => 'en')),
		'#description' => t('Works only with Core, Apache Solr, Lucene and Xapian searches. An HTTP status of 301 or 302 will be returned for this redirect.', array(), array('context' => 'Works only with Core, Apache Solr, Lucene and Xapian searches.', 'langcode' => 'en')),
		'#default_value' => variable_get('mavic_search_404_jump', FALSE),
	);
	$form['mavic_search_404_first'] = array(
		'#type' => 'checkbox',
		'#title' => t('Jump directly to the first search result even when there are multiple results', array(), array('context' => 'Search 404 jump first result', 'langcode' => 'en')),
		'#description' => t('Works only with Core, Apache Solr, Lucene and Xapian searches. An HTTP status of 301 or 302 will be returned for this redirect.', array(), array('context' => 'Works only with Core, Apache Solr, Lucene and Xapian searches.', 'langcode' => 'en')),
		'#default_value' => variable_get('mavic_search_404_first', FALSE),
	);
	// Added for having a 301 redirect instead of the standard 302 (offered by the drupal_goto).
	// TODO: jump to search pages should still return 404 and not 301 or 302 for searches other
	// than Core, Apache Solr, Lucene and Xapian. Can this even be done? Meta refresh?
	$form['mavic_search_404_redirect_301'] = array(
		'#type' => 'checkbox',
		'#title' => t('Use a 301 Redirect instead of 302 Redirect', array(), array('context' => 'Use a 301 Redirect instead of 302 Redirect', 'langcode' => 'en')),
		'#description' => t('This applies when the option to jump to first result is enabled and also for mavic_search_404 results pages other than for Core, Apache Solr, Lucene and Xapian.', array(), array('context' => 'Applies when the option to jump to first result is enabled', 'langcode' => 'en')),
		'#default_value' => variable_get('mavic_search_404_redirect_301', FALSE),
	);
	/* // Added for displaying blocks for 404 searches.
	  $form['mavic_search_404_block_show'] = array(
	  '#type' => 'checkbox',
	  '#title' => t('Show left and right sidebars in page when a 404 search occurs'),
	  '#default_value' => variable_get('mavic_search_404_block_show', FALSE),
	  );
	  $form['mavic_search_404_do_google_cse'] = array(
	  '#type' => 'checkbox',
	  '#title' => t('Do a "Google CSE" search instead of a Drupal Search when a 404 occurs'),
	  '#description' => t('Requires Google CSE and Google CSE Search Modules to be Enabled.'),
	  '#attributes' => module_exists('google') ? array() : array('disabled' => 'disabled'),
	  '#default_value' => variable_get('mavic_search_404_do_google_cse', FALSE),
	  );
	  $form['mavic_search_404_do_search_by_page'] = array(
	  '#type' => 'checkbox',
	  '#title' => t('Do a "Search By Page" search instead of a Drupal Search when a 404 occurs'),
	  '#description' => t('Requires "Search by page" module to be Enabled.'),
	  '#attributes' => module_exists('search_by_page') ? array() : array('disabled' => 'disabled'),
	  '#default_value' => variable_get('mavic_search_404_do_search_by_page', FALSE),
	  );
	  $form['mavic_search_404_do_fuzzysearch'] = array(
	  '#type' => 'checkbox',
	  '#title' => t('Do a "Fuzzy Search" search instead of a Drupal Search when a 404 occurs'),
	  '#description' => t('Requires "Fuzzy Search" module to be enabled. If using both Core search and Fuzzy Search, do not use "search" as your fuzzysearch results path.'),
	  '#attributes' => module_exists('fuzzysearch') ? array() : array('disabled' => 'disabled'),
	  '#default_value' => variable_get('mavic_search_404_do_fuzzysearch', FALSE),
	  ); */
	// Added for preventing automatic search for large sites.
	$form['mavic_search_404_skip_auto_search'] = array(
		'#title' => t('Disable auto search', array(), array('context' => '404 Disable auto search', 'langcode' => 'en')),
		'#description' => t('Disable automatically searching for the keywords when a page is not found and instead show the populated search form with the keywords. Useful for large sites to reduce server loads.', array(), array('context' => 'Disable automatically searching for the keywords', 'langcode' => 'en')),
		'#type' => 'checkbox',
		'#default_value' => variable_get('mavic_search_404_skip_auto_search', FALSE),
	);
	// Disable the drupal error message when showing search results.
	$form['mavic_search_404_disable_error_message'] = array(
		'#title' => t('Disable error message', array(), array('context' => '404 Disable error message', 'langcode' => 'en')),
		'#type' => 'checkbox',
		'#description' => t('Disable the Drupal error message when search results are shown on a 404 page.', array(), array('context' => 'Disable the Drupal error message', 'langcode' => 'en')),
		'#default_value' => variable_get('mavic_search_404_disable_error_message', FALSE),
	);
	$form['mavic'] = array(
		'#type' => 'fieldset',
		'#title' => t('Mavic settings', array(), array('context' => 'Mavic settings', 'langcode' => 'en')),
		'#collapsible' => TRUE,
		'#collapsed' => TRUE,
	);

	$form['mavic']['mavic_search_404_do_mavic_search'] = array(
		'#type' => 'checkbox',
		'#title' => t('Redirect using mavic search module', array(), array('context' => 'Redirect using mavic search module', 'langcode' => 'en')),
		'#description' => t('Requires Google CSE Advanced Modules and Mavic search Modules to be Enabled.', array(), array('context' => 'Requires Google CSE Ad and Mavic search', 'langcode' => 'en')),
		'#attributes' => (module_exists('google_cse_adv') && (module_exists('mavic_search'))) ? array() : array('disabled' => 'disabled'),
		'#default_value' => variable_get('mavic_search_404_do_mavic_search', FALSE),
	);
	$form['mavic']['mavic_search_404_overwrite_autopath'] = array(
		'#type' => 'checkbox',
		'#title' => t('Redirect when an alias changes after updating an existing node.', array(), array('context' => 'Redirect when an alias changes', 'langcode' => 'en')),
		'#description' => t('This overwrites pathauto settings : if enabled, it will set "Update action" pathauto settings back on "Do nothing" while still taking care of pathauto logic (for creating a new alias and deleting the old one) before setting a redirection from the old alias to the new one.', array(), array('context' => 'This overwrites pathauto settings', 'langcode' => 'en')),
		'#attributes' => (module_exists('pathauto') && variable_get('mavic_search_404_do_mavic_search', FALSE)) ? array() : array('disabled' => 'disabled'),
		'#default_value' => variable_get('mavic_search_404_overwrite_autopath', TRUE),
	);
	$form['mavic']['mavic_search_404_redirect_deleted'] = array(
		'#type' => 'checkbox',
		'#title' => t('Redirect when a node is deleted.', array(), array('context' => 'Redirect when a node is deleted.', 'langcode' => 'en')),
		'#description' => t('Store in the 404 redirect list the path alias of deleted nodes for later redirection.', array(), array('context' => 'Store in the 404 redirect list the path alias', 'langcode' => 'en')),
		'#attributes' => (module_exists('pathauto') && variable_get('mavic_search_404_do_mavic_search', FALSE)) ? array() : array('disabled' => 'disabled'),
		'#default_value' => variable_get('mavic_search_404_redirect_deleted', TRUE),
	);
	$form['mavic']['mavic_search_404_redirect_force_404'] = array(
		'#type' => 'checkbox',
		'#title' => t('Redirect but forces 404', array(), array('context' => 'Redirect but forces 404', 'langcode' => 'en')),
		'#description' => t('This applies when the option to redirect is enabled.', array(), array('context' => 'Applies when the option to redirect is enabled', 'langcode' => 'en')),
		'#attributes' => (module_exists('google_cse_adv') && (module_exists('mavic_search'))) ? array() : array('disabled' => 'disabled'),
		'#default_value' => variable_get('mavic_search_404_redirect_force_404', FALSE),
	);
	$form['mavic']['mavic_search_404_form_filter_regex'] = array(
		'#type' => 'textfield',
		'#title' => t('Mavic search filters (expression)', array(), array('context' => 'Mavic search filters', 'langcode' => 'en')),
		'#description' => t('This regular expression will be applied to filter all queries. The first match will be used to preselect the Mavic search engine\'s filters. Maximum of 5 matching expressions in this format : closestStringToFilter1 | closestStringToFilter2 | closestStringToFilter3 | etc', array(), array('context' => 'This regular expression will be applied to filter all queries.', 'langcode' => 'en')),
		'#attributes' => (module_exists('google_cse_adv') && (module_exists('mavic_search'))) ? array() : array('disabled' => 'disabled'),
		'#default_value' => variable_get('mavic_search_404_form_filter_regex', 'product|news|technolog|histor|video'),
	);
	$form['mavic']['mavic_search_404_form_filter_name'] = array(
		'#type' => 'textfield',
		'#title' => t('Mavic search filters (name)'),
		'#description' => t('Exact list of Mavic search filters system names, maximum of 5 separated by semi-colon, in the same order than the above expression, eg : filter1;filter2;filter3;...etc'),
		'#attributes' => (module_exists('google_cse_adv') && (module_exists('mavic_search'))) ? array() : array('disabled' => 'disabled'),
		'#default_value' => variable_get('mavic_search_404_form_filter_name', 'macromodel;news;technology;history;video'),
	);
	$form['advanced'] = array(
		'#type' => 'fieldset',
		'#title' => t('Advanced settings', array(), array('context' => 'Advanced settings', 'langcode' => 'en')),
		'#collapsible' => TRUE,
		'#collapsed' => TRUE,
	);
	$form['advanced']['mavic_search_404_use_or'] = array(
		'#type' => 'checkbox',
		'#title' => t('Use OR between keywords when searching.', array(), array('context' => 'mavic_search_404_use_or', 'langcode' => 'en')),
		'#default_value' => variable_get('mavic_search_404_use_or', FALSE),
	);
	$form['advanced']['mavic_search_404_use_search_engine'] = array(
		'#type' => 'checkbox',
		'#title' => t('Use auto-detection of keywords from search engine referer', array(), array('context' => 'mavic_search_404_use_search_engine', 'langcode' => 'en')),
		'#description' => t('This feature will conduct a search based on the query string got from a search engine if the URL of the search result points to a 404 page in the current website. Currently supported search engines: Google, Yahoo, Altavista, Lycos, Bing and AOL', array(), array('context' => 'mavic_search_404_use_search_engine', 'langcode' => 'en')),
		'#default_value' => variable_get('mavic_search_404_use_search_engine', FALSE),
	);
	$form['advanced']['mavic_search_404_ignore'] = array(
		'#type' => 'textarea',
		'#title' => t('Words to ignore', array(), array('context' => 'mavic_search_404_ignore', 'langcode' => 'en')),
		'#description' => t('These words will be ignored from the search query. Separate words with a space, e.g.: "and or the".', array(), array('context' => 'mavic_search_404_ignore', 'langcode' => 'en')),
		'#default_value' => variable_get('mavic_search_404_ignore', t('and or the', array(), array('context' => 'mavic_search_404_ignore', 'langcode' => 'en'))),
	);
	$form['advanced']['mavic_search_404_ignore_extensions'] = array(
		'#type' => 'textfield',
		'#title' => t('Extensions to ignore', array(), array('context' => 'mavic_search_404_ignore_extensions', 'langcode' => 'en')),
		'#description' => t('These extensions will be ignored from the search query, e.g.: http://www.example.com/invalid/page.php will only search for "invalid page". Separate extensions with a space, e.g.: "htm html php". Do not include leading dot.', array(), array('context' => 'mavic_search_404_ignore_extensions', 'langcode' => 'en')),
		'#default_value' => variable_get('mavic_search_404_ignore_extensions', 'htm html php'),
	);
	$form['advanced']['mavic_search_404_ignore_query'] = array(
		'#type' => 'textfield',
		'#title' => t('Extensions to abort search', array(), array('context' => 'mavic_search_404_ignore_query', 'langcode' => 'en')),
		'#description' => t('A search will not be performed for a query ending in these extensions. Separate extensions with a space, e.g.: "gif jpg jpeg bmp png". Do not include leading dot.', array(), array('context' => 'mavic_search_404_ignore_query', 'langcode' => 'en')),
		'#default_value' => variable_get('mavic_search_404_ignore_query', 'gif jpg jpeg bmp png'),
	);
	$form['advanced']['mavic_search_404_regex'] = array(
		'#type' => 'textfield',
		'#title' => t('PCRE filter', array(), array('context' => 'mavic_search_404_regex', 'langcode' => 'en')),
		'#description' => t('This regular expression will be applied to filter all queries. The parts of the path that match the expression will be EXCLUDED from the search. You do NOT have to enclose the regex in forward slashes when defining the PCRE. e.g.: use "[foo]bar" instead of "/[foo]bar/". On how to use a PCRE Regex please refer <a href="http://php.net/pcre">PCRE pages in the PHP Manual</a>.', array(), array('context' => 'mavic_search_404_regex', 'langcode' => 'en')),
		'#default_value' => variable_get('mavic_search_404_regex', ''),
	);
	// Show custom title for the 404 search results page.
	$form['advanced']['mavic_search_404_page_title'] = array(
		'#type' => 'textfield',
		'#title' => t('Custom Page Title', array(), array('context' => 'mavic_search_404_page_title', 'langcode' => 'en')),
		'#description' => t('You can enter a value that will displayed at the title of the Webpage e.g. "Page not found"', array(), array('context' => 'mavic_search_404_page_title', 'langcode' => 'en')),
		'#default_value' => variable_get('mavic_search_404_page_title', t('Page not found', array(), array('context' => 'mavic_search_404_page_title', 'langcode' => 'en'))),
	);
	// Show custom text below the search form for the 404 search results page.
	$form['advanced']['mavic_search_404_page_text'] = array(
		'#type' => 'textarea',
		'#title' => t('Custom Page Text', array(), array('context' => 'mavic_search_404_page_text', 'langcode' => 'en')),
		'#default_value' => variable_get('mavic_search_404_page_text', ''),
		'#description' => t('You can enter a custom text message that can be displayed at the top of the search results, HTML formatting can be used', array(), array('context' => 'mavic_search_404_page_text', 'langcode' => 'en')),
	);
	// Helps reset the site_404 variable to mavic_search_404 in case the user changes it manually.
	$form['site_404'] = array(
		'#type' => 'hidden',
		'#value' => 'mavic_search_404',
	);
	// Tell the user about the site_404 issue.
	$form['mavic_search_404_variable_message'] = array(
		'#type' => 'markup',
		'#prefix' => '<p>',
		'#suffix' => '</p>',
		'#value' => t('Saving this form will revert the 404 handling on the site to this module.', array(), array('context' => 'mavic_search_404_variable_message', 'langcode' => 'en')),
	);

	return system_settings_form($form);
}

function mavic_search_404_theme_registry_alter(&$theme_registry) {
	$theme_registry['pager_link']['theme path'] = drupal_get_path('module', 'mavic_search_404');
	$theme_registry['pager_link']['function'] = 'mavic_search_404_pager_link';
}

/**
 * Overrides pager_link which returns HTML for a link to a specific query result page.
 *
 * @param $text
 *   The link text. Also used to figure out the title attribute of the link,
 *   if it is not provided in $attributes['title']; in this case, $text must
 *   be one of the standard pager link text strings that would be generated by
 *   the pager theme functions, such as a number or t('« first').
 * @param $page_new
 *   The first result to display on the linked page.
 * @param $element
 *   An optional integer to distinguish between multiple pagers on one page.
 * @param $parameters
 *   An associative array of query string parameters to append to the pager link.
 * @param $attributes
 *   An associative array of HTML attributes to apply to the pager link.
 * @return
 *   An HTML string that generates the link.
 *
 * @ingroup themeable
 */
function mavic_search_404_pager_link($text, $page_new, $element, $parameters = array(), $attributes = array()) {
	$triggerIt = FALSE;
	if (strpos($_GET['q'], 'mavic_search_404_redirect') != FALSE)
		$triggerIt = TRUE;
	$page = isset($_GET['page']) ? $_GET['page'] : '';
	if ($new_page = implode(',', pager_load_array($page_new[$element], $element, explode(',', $page)))) {
		$parameters['page'] = $new_page;
	}

	$query = array();
	if (count($parameters)) {
		$query[] = drupal_query_string_encode($parameters, array());
	}
	if (!$triggerIt) {
		$querystring = pager_get_querystring();
		if ($querystring != '') {
			$query[] = $querystring;
		}
	}
	// Set each pager link title
	if (!isset($attributes['title'])) {
		static $titles = NULL;
		if (!isset($titles)) {
			$titles = array(
				t('« first') => t('Go to first page'),
				t('‹ previous') => t('Go to previous page'),
				t('next ›') => t('Go to next page'),
				t('last »') => t('Go to last page'),
			);
		}
		if (isset($titles[$text])) {
			$attributes['title'] = $titles[$text];
		}
		else if (is_numeric($text)) {
			$attributes['title'] = t('Go to page @number', array('@number' => $text));
		}
	}
	if ($triggerIt) {
		$path = 'admin/settings/mavic_search_404_redirect';
		return l($text, $path, array('attributes' => $attributes, 'query' => count($query) ? implode('&', $query) : NULL));
	}
	else {
		return l($text, $_GET['q'], array('attributes' => $attributes, 'query' => count($query) ? implode('&', $query) : NULL));
	}
}

function mavic_search_404_redirect_autocomplete($string) {
	// If the request has a '/' in the search text, then the system will have
	// split it into multiple arguments, sending as $string only the first arg.
	$args = func_get_args();

	$matches = array();

	// if only language
	if (count($args) == 1) {
		$matches = array('en/' => 'en/', 'fr/' => 'fr/', 'de/' => 'de/', 'it/' => 'it/', 'ja/' => 'ja/');
	} else {
		//Get existing alias
		$lang = array_shift($args);
		$rest = implode('/', $args);
		$query = db_query("SELECT a.dst, n.nid, n.status, a.src, n.language FROM {url_alias} a
										INNER JOIN {node} n
										ON n.nid = CONVERT(SUBSTRING(a.src,6),UNSIGNED)
										WHERE n.status = 1
										AND n.language = '%s'
										AND a.dst LIKE '%%%s%%' 
										LIMIT 0,20", array($lang, $rest));
		while ($alias = db_fetch_object($query)) {
			// Add alias to list 
			$matches[$alias->language . '/' . $alias->dst] = $alias->language . '/' . $alias->dst;
		}
	}
	// Sort result list.
	natsort($matches);

	// Print results.
	drupal_json($matches);
	exit;
}

