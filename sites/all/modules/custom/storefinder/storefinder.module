<?php

/**
 * @file
 * Sore finder
 */

/**
* Implementation of hook_menu().
*/
function storefinder_menu() {
        $items = array();
        $items['storefinder/find'] = array(
                'title' => 'Find stores',
                'page callback' => 'storefinder_find',
                'access callback' => TRUE,
                'type' => MENU_CALLBACK
                );
        return $items;
}

/**
 * storefinder_find()
 * @param $shoptype
 * @param $lat
 * @param $lng
 * @param $radius
 * @param $isMaviclab
 * @param $isMp3
 * @param $isTechdealer
 * @param $isPremium
 * @param $isFiltre1
 * @param $isFiltre2
 * @param $isFiltre3
 * @param $isFiltre4
 */		
function storefinder_find($shoptype, $lat, $lng, $radius, $isMaviclab , $isMp3, $isTechdealer, $isPremium, $isFiltre1, $isFiltre2, $isFiltre3, $isFiltre4 ) {
	
	//$lat = intval($lat);
	//$lng = intval($lng);
	//get countries
	$countries = sfGetCountries();

	$query='	SELECT 
				
				street, 
				city ,
				postal_code,
				country,
				location_phone.phone as phone,
				latitude as lat,
				longitude as lng,
				node.title as title2,
				node_revisions.body as name,
				field_storefinder_value,
				field_shopinshop_value,
				field_website_value as website,
				field_email_email as email,
				field_premium_value,
				field_website_value,
				field_mp3_value,
				field_wheels_value,
				field_rims_value,
				field_tyres_value,
				field_computers_value,
				field_pedals_value,
				field_helmets_value,
				field_footwear_value,
				field_apparel_value,
				field_tech_dealer_value,
				field_mavic_lab_value,
				field_accessories_value,
				field_filtre_un_value,
				field_filtre_deux_value,
				field_filtre_trois_value,
				field_filtre_quatre_value';
	$queryFrom = '				FROM 
					
					{location_instance}
					INNER JOIN {node} using (nid,vid)
					INNER JOIN {node_revisions} using (vid)
					INNER JOIN {content_type_shop} using (vid)
					LEFT JOIN {content_field_website} using (vid)
					LEFT JOIN {content_field_premium} using (vid)
					LEFT JOIN {content_field_mp3} using (vid)
					LEFT JOIN {content_field_rims} using (vid)
					LEFT JOIN {content_field_tyres} using (vid)
					LEFT JOIN {content_field_computers} using (vid)
					LEFT JOIN {content_field_pedals} using (vid)
					LEFT JOIN {content_field_footwear} using (vid)
					LEFT JOIN {content_field_email} using (vid)
					LEFT JOIN {content_field_apparel} using (vid)
					LEFT JOIN {content_field_accessories} using (vid)
					LEFT JOIN {content_field_mavic_lab} using (vid)
					LEFT JOIN {content_field_tech_dealer} using (vid)
					LEFT JOIN {content_field_wheels} using (vid)
					LEFT JOIN {content_field_filtre_un} using (vid)
					LEFT JOIN {content_field_filtre_deux} using (vid)
					LEFT JOIN {content_field_filtre_trois} using (vid)
					LEFT JOIN {content_field_filtre_quatre} using (vid)
					INNER JOIN {location} ON location.lid = location_instance.lid
					LEFT JOIN {location_phone} ON location_phone.lid = location.lid
';

	switch ($shoptype) {
		case 0 : //storefinder
			$extraFilter = TRUE;
			if ($isMaviclab+$isMp3+$isTechdealer+$isPremium+$isFiltre1+$isFiltre2+$isFiltre3+$isFiltre4 == 0) {
			 $extraFilter=FALSE;
      }
			
			$radius = intval($radius);
			$isMaviclab = intval($isMaviclab);
			$isMp3 = intval($isMp3);
			$isTechdealer = intval($isTechdealer);
			$isFiltre1 = intval($isFiltre1);
			$isFiltre2 = intval($isFiltre2);
			$isFiltre3 = intval($isFiltre3);
			$isFiltre4 = intval($isFiltre4);
			
			$query .= ',
				( 6371 * acos( cos( radians(' . $lat . ') ) * cos( radians( latitude ) ) * cos( radians( longitude ) - radians(' . $lng . ') ) + sin( radians(' . $lat . ') ) * sin( radians( latitude ) ) ) ) 
				AS distance ';
			$query .= $queryFrom;
			$query .= '					
				WHERE 
					1=1
				';
				
				if ($extraFilter) {
					$query .='
					AND 
					(	
					true  ';
					if ($isMaviclab) $query .= ' AND field_mavic_lab_value = 1 ' ;
					if ($isMp3) $query .= ' AND field_mp3_value = 1 ' ;
					if ($isTechdealer) $query .= ' AND field_tech_dealer_value = 1 ' ;
					if ($isFiltre1) $query .= ' AND field_filtre_un_value = 1 ' ;
					if ($isFiltre2) $query .= ' AND field_filtre_deux_value = 1 ' ;
					if ($isFiltre3) $query .= ' AND field_filtre_trois_value = 1 ' ;
					if ($isFiltre4) $query .= ' AND field_filtre_quatre_value = 1 ' ;
					if ($isPremium) $query .= ' AND field_premium_value = "mavic_yellow" ' ;
					
					$query .= ')';
				}
				$query .= ' AND field_storefinder_value = 1 ';
				$query .= 'HAVING distance < ' . $radius . ' ';
				$query .= 'ORDER BY distance ASC'; 
			
			break;
		case 1 : //shopinshop
			$extraFilter = TRUE;
			if ($isMaviclab+$isMp3 == 0) $extraFilter=FALSE;
			$country = (isset($countries[strtolower($radius)]) && !empty($countries[strtolower($radius)])) ? strtolower($radius) : "fr";
			$isBikeSystem = intval($isMaviclab);
			$isRidersEquip = intval($isMp3);
			
			$query .= $queryFrom;
			$query .= '
				WHERE 
					1=1
				';
				if ($extraFilter) {
					$query .='
					AND 
					(	
					true  ';
					if ($isBikeSystem) $query .= ' AND (field_wheels_value = 1 OR field_rims_value = 1 OR field_tyres_value = 1 OR field_computers_value = 1 OR field_pedals_value = 1)' ;
					if ($isRidersEquip) $query .= ' AND (field_helmets_value = 1 OR field_footwear_value = 1 OR field_apparel_value = 1)' ;
					
					$query .= ')';
				}
				$query .= ' AND field_shopinshop_value = 1 ';
				$query .= ' AND country = "' . $country . '" ';
							
			break;
		case 2 : //storefinder country level 
			$extraFilter = TRUE;
			if ($isMaviclab+$isMp3+$isTechdealer+$isPremium+$isFiltre1+$isFiltre2+$isFiltre3+$isFiltre4 == 0) {
			  $extraFilter=FALSE;
      }
			if (strtolower($radius) == "gb")
				$radius = "uk";
			$country = (isset($countries[strtolower($radius)]) && !empty($countries[strtolower($radius)])) ? strtolower($radius) : "noCountry";
			$isMaviclab = intval($isMaviclab);
			$isMp3 = intval($isMp3);
			$isTechdealer = intval($isTechdealer);
			$isFiltre1 = intval($isFiltre1);
			$isFiltre2 = intval($isFiltre2);
			$isFiltre3 = intval($isFiltre3);
			$isFiltre4 = intval($isFiltre4);
			
			$query .= $queryFrom;
			$query .= '
				WHERE 
					1=1
				';
				if ($extraFilter) {
					$query .='
					AND 
					(	
					true  ';
					if ($isMaviclab) $query .= ' AND field_mavic_lab_value = 1 ' ;
					if ($isMp3) $query .= ' AND field_mp3_value = 1 ' ;
					if ($isTechdealer) $query .= ' AND field_tech_dealer_value = 1 ' ;
					if ($isFiltre1) $query .= ' AND field_filtre_un_value = 1 ' ;
					if ($isFiltre2) $query .= ' AND field_filtre_deux_value = 1 ' ;
					if ($isFiltre3) $query .= ' AND field_filtre_trois_value = 1 ' ;
					if ($isFiltre4) $query .= ' AND field_filtre_quatre_value = 1 ' ;
					if ($isPremium) $query .= ' AND field_premium_value = "mavic_yellow" ' ;
					
					$query .= ')';
				}
				$query .= ' AND field_storefinder_value = 1 ';
				$query .= ' AND country = "' . $country . '" ';
							
			break;
	}
	$result = db_query( $query );
	// Start XML file, create parent node
	$dom = new DOMDocument("1.0");
	$node = $dom->createElement("markers");
	$parnode = $dom->appendChild($node);
	
	

	header("Content-type: text/xml");

	// Iterate through the rows, adding XML nodes for each
	$removeDuplicate = array();
	while ($row = db_fetch_array( $result)) {
		if (!isset($removeDuplicate[$row['title2']])) {
			$removeDuplicate[$row['title2']] = "done";
			$node = $dom->createElement("marker");
			$newnode = $parnode->appendChild($node);

			foreach ($row as $key => $value) {
			  $newnode->setAttribute($key, $value);
			}
			//set country
			$newnode->setAttribute('countryname', $countries[ $row['country'] ]);
			
		}
	}
	
	echo $dom->saveXML();
	exit();
}

/*Utilities functions*/
function sfGetCountries() {
return array(
    'ad' => t('Andorra'),
    'ae' => t('United Arab Emirates'),
    'af' => t('Afghanistan'),
    'ag' => t('Antigua and Barbuda'),
    'ai' => t('Anguilla'),
    'al' => t('Albania'),
    'am' => t('Armenia'),
    'an' => t('Netherlands Antilles'),
    'ao' => t('Angola'),
    'aq' => t('Antarctica'),
    'ar' => t('Argentina'),
    'as' => t('American Samoa'),
    'at' => t('Austria'),
    'au' => t('Australia'),
    'aw' => t('Aruba'),
    'ax' => t('Aland Islands'),
    'az' => t('Azerbaijan'),
    'ba' => t('Bosnia and Herzegovina'),
    'bb' => t('Barbados'),
    'bd' => t('Bangladesh'),
    'be' => t('Belgium'),
    'bf' => t('Burkina Faso'),
    'bg' => t('Bulgaria'),
    'bh' => t('Bahrain'),
    'bi' => t('Burundi'),
    'bj' => t('Benin'),
    'bm' => t('Bermuda'),
    'bn' => t('Brunei'),
    'bo' => t('Bolivia'),
    'br' => t('Brazil'),
    'bs' => t('Bahamas'),
    'bt' => t('Bhutan'),
    'bv' => t('Bouvet Island'),
    'bw' => t('Botswana'),
    'by' => t('Belarus'),
    'bz' => t('Belize'),
    'ca' => t('Canada'),
    'cc' => t('Cocos (Keeling) Islands'),
    'cd' => t('Congo (Kinshasa)'),
    'cf' => t('Central African Republic'),
    'cg' => t('Congo (Brazzaville)'),
    'ch' => t('Switzerland'),
    'ci' => t('Ivory Coast'),
    'ck' => t('Cook Islands'),
    'cl' => t('Chile'),
    'cm' => t('Cameroon'),
    'cn' => t('China'),
    'co' => t('Colombia'),
    'cr' => t('Costa Rica'),
    'cs' => t('Serbia And Montenegro'), // Transitional reservation
    'cu' => t('Cuba'),
    'cv' => t('Cape Verde'),
    'cx' => t('Christmas Island'),
    'cy' => t('Cyprus'),
    'cz' => t('Czech Republic'),
    'de' => t('Germany'),
    'dj' => t('Djibouti'),
    'dk' => t('Denmark'),
    'dm' => t('Dominica'),
    'do' => t('Dominican Republic'),
    'dz' => t('Algeria'),
    'ec' => t('Ecuador'),
    'ee' => t('Estonia'),
    'eg' => t('Egypt'),
    'eh' => t('Western Sahara'),
    'er' => t('Eritrea'),
    'es' => t('Spain'),
    'et' => t('Ethiopia'),
    'fi' => t('Finland'),
    'fj' => t('Fiji'),
    'fk' => t('Falkland Islands'),
    'fm' => t('Micronesia'),
    'fo' => t('Faroe Islands'),
    'fr' => t('France'),
    'ga' => t('Gabon'),
    'gd' => t('Grenada'),
    'ge' => t('Georgia'),
    'gf' => t('French Guiana'),
    'gg' => t('Guernsey'),
    'gh' => t('Ghana'),
    'gi' => t('Gibraltar'),
    'gl' => t('Greenland'),
    'gm' => t('Gambia'),
    'gn' => t('Guinea'),
    'gp' => t('Guadeloupe'),
    'gq' => t('Equatorial Guinea'),
    'gr' => t('Greece'),
    'gs' => t('South Georgia and the South Sandwich Islands'),
    'gt' => t('Guatemala'),
    'gu' => t('Guam'),
    'gw' => t('Guinea-Bissau'),
    'gy' => t('Guyana'),
    'hk' => t('Hong Kong S.A.R., China'),
    'hm' => t('Heard Island and McDonald Islands'),
    'hn' => t('Honduras'),
    'hr' => t('Croatia'),
    'ht' => t('Haiti'),
    'hu' => t('Hungary'),
    'id' => t('Indonesia'),
    'ie' => t('Ireland'),
    'il' => t('Israel'),
    'im' => t('Isle of Man'),
    'in' => t('India'),
    'io' => t('British Indian Ocean Territory'),
    'iq' => t('Iraq'),
    'ir' => t('Iran'),
    'is' => t('Iceland'),
    'it' => t('Italy'),
    'je' => t('Jersey'),
    'jm' => t('Jamaica'),
    'jo' => t('Jordan'),
    'jp' => t('Japan'),
    'ke' => t('Kenya'),
    'kg' => t('Kyrgyzstan'),
    'kh' => t('Cambodia'),
    'ki' => t('Kiribati'),
    'km' => t('Comoros'),
    'kn' => t('Saint Kitts and Nevis'),
    'kp' => t('North Korea'),
    'kr' => t('South Korea'),
    'kw' => t('Kuwait'),
    'ky' => t('Cayman Islands'),
    'kz' => t('Kazakhstan'),
    'la' => t('Laos'),
    'lb' => t('Lebanon'),
    'lc' => t('Saint Lucia'),
    'li' => t('Liechtenstein'),
    'lk' => t('Sri Lanka'),
    'lr' => t('Liberia'),
    'ls' => t('Lesotho'),
    'lt' => t('Lithuania'),
    'lu' => t('Luxembourg'),
    'lv' => t('Latvia'),
    'ly' => t('Libya'),
    'ma' => t('Morocco'),
    'mc' => t('Monaco'),
    'md' => t('Moldova'),
    'me' => t('Montenegro'),
    'mg' => t('Madagascar'),
    'mh' => t('Marshall Islands'),
    'mk' => t('Macedonia'),
    'ml' => t('Mali'),
    'mm' => t('Myanmar'),
    'mn' => t('Mongolia'),
    'mo' => t('Macao S.A.R., China'),
    'mp' => t('Northern Mariana Islands'),
    'mq' => t('Martinique'),
    'mr' => t('Mauritania'),
    'ms' => t('Montserrat'),
    'mt' => t('Malta'),
    'mu' => t('Mauritius'),
    'mv' => t('Maldives'),
    'mw' => t('Malawi'),
    'mx' => t('Mexico'),
    'my' => t('Malaysia'),
    'mz' => t('Mozambique'),
    'na' => t('Namibia'),
    'nc' => t('New Caledonia'),
    'ne' => t('Niger'),
    'nf' => t('Norfolk Island'),
    'ng' => t('Nigeria'),
    'ni' => t('Nicaragua'),
    'nl' => t('Netherlands'),
    'no' => t('Norway'),
    'np' => t('Nepal'),
    'nr' => t('Nauru'),
    'nu' => t('Niue'),
    'nz' => t('New Zealand'),
    'om' => t('Oman'),
    'pa' => t('Panama'),
    'pe' => t('Peru'),
    'pf' => t('French Polynesia'),
    'pg' => t('Papua New Guinea'),
    'ph' => t('Philippines'),
    'pk' => t('Pakistan'),
    'pl' => t('Poland'),
    'pm' => t('Saint Pierre and Miquelon'),
    'pn' => t('Pitcairn'),
    'pr' => t('Puerto Rico'),
    'ps' => t('Palestinian Territory'),
    'pt' => t('Portugal'),
    'pw' => t('Palau'),
    'py' => t('Paraguay'),
    'qa' => t('Qatar'),
    're' => t('Reunion'),
    'ro' => t('Romania'),
    'rs' => t('Serbia'),
    'ru' => t('Russia'),
    'rw' => t('Rwanda'),
    'sa' => t('Saudi Arabia'),
    'sb' => t('Solomon Islands'),
    'sc' => t('Seychelles'),
    'sd' => t('Sudan'),
    'se' => t('Sweden'),
    'sg' => t('Singapore'),
    'sh' => t('Saint Helena'),
    'si' => t('Slovenia'),
    'sj' => t('Svalbard and Jan Mayen'),
    'sk' => t('Slovakia'),
    'sl' => t('Sierra Leone'),
    'sm' => t('San Marino'),
    'sn' => t('Senegal'),
    'so' => t('Somalia'),
    'sr' => t('Suriname'),
    'st' => t('Sao Tome and Principe'),
    'sv' => t('El Salvador'),
    'sy' => t('Syria'),
    'sz' => t('Swaziland'),
    'tc' => t('Turks and Caicos Islands'),
    'td' => t('Chad'),
    'tf' => t('French Southern Territories'),
    'tg' => t('Togo'),
    'th' => t('Thailand'),
    'tj' => t('Tajikistan'),
    'tk' => t('Tokelau'),
    'tl' => t('East Timor'),
    'tm' => t('Turkmenistan'),
    'tn' => t('Tunisia'),
    'to' => t('Tonga'),
    'tr' => t('Turkey'),
    'tt' => t('Trinidad and Tobago'),
    'tv' => t('Tuvalu'),
    'tw' => t('Taiwan'),
    'tz' => t('Tanzania'),
    'ua' => t('Ukraine'),
    'ug' => t('Uganda'),
    'uk' => t('United Kingdom'),
    'um' => t('United States Minor Outlying Islands'),
    'us' => t('United States'),
    'uy' => t('Uruguay'),
    'uz' => t('Uzbekistan'),
    'va' => t('Vatican'),
    'vc' => t('Saint Vincent and the Grenadines'),
    've' => t('Venezuela'),
    'vg' => t('British Virgin Islands'),
    'vi' => t('U.S. Virgin Islands'),
    'vn' => t('Vietnam'),
    'vu' => t('Vanuatu'),
    'wf' => t('Wallis and Futuna'),
    'ws' => t('Samoa'),
    'ye' => t('Yemen'),
    'yt' => t('Mayotte'),
    'za' => t('South Africa'),
    'zm' => t('Zambia'),
    'zw' => t('Zimbabwe'),
  );
}

